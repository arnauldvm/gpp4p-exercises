JAVA PROFILE 1.0.1, created Thu Nov 24 16:10:11 2016

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000193, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=50000193, id = 200004, name="DestroyJavaVM", group="main")
THREAD END (id = 200004)
TRACE 300074:
	java.io.FileInputStream.read0(FileInputStream.java:Unknown line)
	java.io.FileInputStream.read(FileInputStream.java:207)
	java.io.DataInputStream.readUnsignedShort(DataInputStream.java:337)
	java.io.DataInputStream.readUTF(DataInputStream.java:589)
TRACE 300075:
	java.io.FileInputStream.readBytes(FileInputStream.java:Unknown line)
	java.io.FileInputStream.read(FileInputStream.java:255)
	java.io.DataInputStream.readFully(DataInputStream.java:195)
	java.io.DataInputStream.readUTF(DataInputStream.java:609)
TRACE 300085:
	java.lang.Integer.getChars(Integer.java:460)
	java.lang.Integer.toString(Integer.java:402)
	java.lang.Integer.toString(Integer.java:935)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:54)
TRACE 300073:
	java.io.FileInputStream.read0(FileInputStream.java:Unknown line)
	java.io.FileInputStream.read(FileInputStream.java:207)
	java.io.DataInputStream.readUnsignedShort(DataInputStream.java:338)
	java.io.DataInputStream.readUTF(DataInputStream.java:589)
TRACE 300086:
	java.lang.Integer.getChars(Integer.java:460)
	java.lang.Integer.toString(Integer.java:402)
	java.lang.Integer.toString(Integer.java:935)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:58)
TRACE 300093:
	java.lang.Integer.stringSize(Integer.java:472)
	java.lang.Integer.toString(Integer.java:400)
	java.lang.Integer.toString(Integer.java:935)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:54)
TRACE 300106:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:19)
TRACE 300101:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:15)
TRACE 300094:
	java.lang.Integer.getChars(Integer.java:450)
	java.lang.Integer.toString(Integer.java:402)
	java.lang.Integer.toString(Integer.java:935)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:54)
TRACE 300105:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:18)
TRACE 300095:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:43)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300096:
	java.lang.Integer.getChars(Integer.java:450)
	java.lang.Integer.toString(Integer.java:402)
	java.lang.Integer.toString(Integer.java:935)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:58)
TRACE 300103:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:17)
TRACE 300089:
	java.lang.Integer.toString(Integer.java:401)
	java.lang.Integer.toString(Integer.java:935)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:58)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
TRACE 300090:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300087:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:43)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300081:
	java.lang.Integer.toString(Integer.java:401)
	java.lang.Integer.toString(Integer.java:935)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:54)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
TRACE 300088:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300098:
	java.lang.Integer.stringSize(Integer.java:472)
	java.lang.Integer.toString(Integer.java:400)
	java.lang.Integer.toString(Integer.java:935)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:58)
TRACE 300107:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:19)
TRACE 300077:
	java.util.Arrays.copyOf(Arrays.java:3210)
	java.util.Arrays.copyOf(Arrays.java:3181)
	java.util.ArrayList.grow(ArrayList.java:261)
	java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)
TRACE 300079:
	java.lang.System.arraycopy(System.java:Unknown line)
	java.util.Arrays.copyOf(Arrays.java:3213)
	java.util.Arrays.copyOf(Arrays.java:3181)
	java.util.ArrayList.grow(ArrayList.java:261)
TRACE 300092:
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300056:
	java.io.FileInputStream.open0(FileInputStream.java:Unknown line)
	java.io.FileInputStream.open(FileInputStream.java:195)
	java.io.FileInputStream.<init>(FileInputStream.java:138)
	sun.misc.URLClassPath$FileLoader$1.getInputStream(URLClassPath.java:1251)
TRACE 300076:
	com.kodewerk.profile.CheckIntegerTestHarness.loadDataset(CheckIntegerTestHarness.java:28)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:9)
TRACE 300078:
	java.io.DataInputStream.readUTF(DataInputStream.java:564)
	com.kodewerk.profile.CheckIntegerTestHarness.loadDataset(CheckIntegerTestHarness.java:27)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:9)
TRACE 300042:
	java.lang.CharacterDataLatin1.getProperties(CharacterDataLatin1.java:72)
	java.lang.CharacterDataLatin1.toUpperCaseEx(CharacterDataLatin1.java:223)
	java.lang.Character.toUpperCaseEx(Character.java:7138)
	java.lang.String.toUpperCase(String.java:2777)
TRACE 300082:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300083:
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300084:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:40)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300091:
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:58)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300097:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300099:
	java.lang.Integer.<init>(Integer.java:867)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:52)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:15)
TRACE 300100:
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:15)
TRACE 300102:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:15)
TRACE 300104:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:17)
CPU SAMPLES BEGIN (total = 5263) Thu Nov 24 16:11:23 2016
rank   self  accum   count trace method
   1 21.30% 21.30%    1121 300074 java.io.FileInputStream.read0
   2 21.30% 42.60%    1121 300075 java.io.FileInputStream.readBytes
   3 19.93% 62.53%    1049 300085 java.lang.Integer.getChars
   4 19.78% 82.31%    1041 300073 java.io.FileInputStream.read0
   5  9.03% 91.34%     475 300086 java.lang.Integer.getChars
   6  2.28% 93.62%     120 300093 java.lang.Integer.stringSize
   7  1.29% 94.91%      68 300106 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
   8  1.24% 96.14%      65 300101 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
   9  0.82% 96.96%      43 300094 java.lang.Integer.getChars
  10  0.80% 97.76%      42 300105 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  11  0.70% 98.46%      37 300095 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  12  0.36% 98.82%      19 300096 java.lang.Integer.getChars
  13  0.15% 98.97%       8 300103 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  14  0.11% 99.09%       6 300089 java.lang.Integer.toString
  15  0.11% 99.20%       6 300090 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  16  0.10% 99.30%       5 300087 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  17  0.08% 99.37%       4 300081 java.lang.Integer.toString
  18  0.08% 99.45%       4 300088 java.lang.String.toCharArray
  19  0.08% 99.52%       4 300098 java.lang.Integer.stringSize
  20  0.08% 99.60%       4 300107 java.lang.String.toCharArray
  21  0.08% 99.68%       4 300077 java.util.Arrays.copyOf
  22  0.04% 99.71%       2 300079 java.lang.System.arraycopy
  23  0.04% 99.75%       2 300092 com.kodewerk.profile.CheckIntegerTestHarness.checkInteger
  24  0.02% 99.77%       1 300056 java.io.FileInputStream.open0
  25  0.02% 99.79%       1 300076 com.kodewerk.profile.CheckIntegerTestHarness.loadDataset
  26  0.02% 99.81%       1 300078 java.io.DataInputStream.readUTF
  27  0.02% 99.83%       1 300042 java.lang.CharacterDataLatin1.getProperties
  28  0.02% 99.85%       1 300082 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  29  0.02% 99.87%       1 300083 com.kodewerk.profile.CheckIntegerTestHarness.checkInteger
  30  0.02% 99.89%       1 300084 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  31  0.02% 99.90%       1 300091 com.kodewerk.profile.CheckIntegerTestHarness.checkInteger
  32  0.02% 99.92%       1 300097 java.lang.String.toCharArray
  33  0.02% 99.94%       1 300099 java.lang.Integer.<init>
  34  0.02% 99.96%       1 300100 com.kodewerk.profile.CheckIntegerTestHarness.checkInteger
  35  0.02% 99.98%       1 300102 java.lang.String.toCharArray
  36  0.02% 100.00%       1 300104 java.lang.String.toCharArray
CPU SAMPLES END
