JAVA PROFILE 1.0.1, created Thu Nov 24 21:28:40 2016

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=50000193, id = 200001, name="main", group="main")
THREAD END (id = 200001)
THREAD START (obj=50000193, id = 200004, name="DestroyJavaVM", group="main")
THREAD END (id = 200004)
TRACE 300072:
	java.io.FileInputStream.readBytes(FileInputStream.java:Unknown line)
	java.io.FileInputStream.read(FileInputStream.java:255)
	java.io.DataInputStream.readFully(DataInputStream.java:195)
	java.io.DataInputStream.readUTF(DataInputStream.java:609)
TRACE 300074:
	java.io.FileInputStream.read0(FileInputStream.java:Unknown line)
	java.io.FileInputStream.read(FileInputStream.java:207)
	java.io.DataInputStream.readUnsignedShort(DataInputStream.java:337)
	java.io.DataInputStream.readUTF(DataInputStream.java:589)
TRACE 300073:
	java.io.FileInputStream.read0(FileInputStream.java:Unknown line)
	java.io.FileInputStream.read(FileInputStream.java:207)
	java.io.DataInputStream.readUnsignedShort(DataInputStream.java:338)
	java.io.DataInputStream.readUTF(DataInputStream.java:589)
TRACE 300091:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:17)
TRACE 300081:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300093:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:18)
TRACE 300088:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:43)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300090:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:15)
TRACE 300096:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:19)
TRACE 300083:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300075:
	java.util.Arrays.copyOf(Arrays.java:3210)
	java.util.Arrays.copyOf(Arrays.java:3181)
	java.util.ArrayList.grow(ArrayList.java:261)
	java.util.ArrayList.ensureExplicitCapacity(ArrayList.java:235)
TRACE 300076:
	java.lang.System.arraycopy(System.java:Unknown line)
	java.util.Arrays.copyOf(Arrays.java:3213)
	java.util.Arrays.copyOf(Arrays.java:3181)
	java.util.ArrayList.grow(ArrayList.java:261)
TRACE 300097:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:19)
TRACE 300084:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:43)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300092:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:17)
TRACE 300051:
	java.util.zip.ZipFile.open(ZipFile.java:Unknown line)
	java.util.zip.ZipFile.<init>(ZipFile.java:219)
	java.util.zip.ZipFile.<init>(ZipFile.java:149)
	java.util.jar.JarFile.<init>(JarFile.java:166)
TRACE 300069:
	java.lang.ClassLoader.findBootstrapClass(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.findBootstrapClassOrNull(ClassLoader.java:1015)
	java.lang.ClassLoader.loadClass(ClassLoader.java:413)
	java.lang.ClassLoader.loadClass(ClassLoader.java:411)
TRACE 300078:
	java.lang.Integer.parseInt(Integer.java:578)
	java.lang.Integer.<init>(Integer.java:867)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:52)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
TRACE 300079:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300080:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:40)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300082:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:40)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:13)
TRACE 300085:
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300086:
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300087:
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300089:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:14)
TRACE 300094:
	java.util.ArrayList.iterator(ArrayList.java:834)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:40)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:18)
TRACE 300095:
	java.lang.String.toCharArray(String.java:2899)
	com.kodewerk.profile.CheckIntegerTestHarness.checkInteger(CheckIntegerTestHarness.java:48)
	com.kodewerk.profile.CheckIntegerTestHarness.testDataset(CheckIntegerTestHarness.java:41)
	com.kodewerk.profile.CheckIntegerTestHarness.main(CheckIntegerTestHarness.java:18)
TRACE 300024:
	java.lang.AbstractStringBuilder.<init>(AbstractStringBuilder.java:68)
	java.lang.StringBuffer.<init>(StringBuffer.java:128)
	java.net.URLStreamHandler.toExternalForm(URLStreamHandler.java:489)
	java.net.URL.toExternalForm(URL.java:929)
CPU SAMPLES BEGIN (total = 4015) Thu Nov 24 21:29:36 2016
rank   self  accum   count trace method
   1 27.62% 27.62%    1109 300072 java.io.FileInputStream.readBytes
   2 27.25% 54.87%    1094 300074 java.io.FileInputStream.read0
   3 22.76% 77.63%     914 300073 java.io.FileInputStream.read0
   4  4.18% 81.82%     168 300091 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
   5  4.06% 85.88%     163 300081 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
   6  3.79% 89.66%     152 300093 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
   7  3.61% 93.28%     145 300088 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
   8  2.96% 96.24%     119 300090 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
   9  2.94% 99.18%     118 300096 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  10  0.15% 99.33%       6 300083 java.lang.String.toCharArray
  11  0.12% 99.45%       5 300075 java.util.Arrays.copyOf
  12  0.07% 99.53%       3 300076 java.lang.System.arraycopy
  13  0.05% 99.58%       2 300097 java.lang.String.toCharArray
  14  0.05% 99.63%       2 300084 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  15  0.05% 99.68%       2 300092 java.lang.String.toCharArray
  16  0.02% 99.70%       1 300051 java.util.zip.ZipFile.open
  17  0.02% 99.73%       1 300069 java.lang.ClassLoader.findBootstrapClass
  18  0.02% 99.75%       1 300078 java.lang.Integer.parseInt
  19  0.02% 99.78%       1 300079 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  20  0.02% 99.80%       1 300080 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  21  0.02% 99.83%       1 300082 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  22  0.02% 99.85%       1 300085 com.kodewerk.profile.CheckIntegerTestHarness.checkInteger
  23  0.02% 99.88%       1 300086 com.kodewerk.profile.CheckIntegerTestHarness.checkInteger
  24  0.02% 99.90%       1 300087 com.kodewerk.profile.CheckIntegerTestHarness.testDataset
  25  0.02% 99.93%       1 300089 java.lang.String.toCharArray
  26  0.02% 99.95%       1 300094 java.util.ArrayList.iterator
  27  0.02% 99.98%       1 300095 java.lang.String.toCharArray
  28  0.02% 100.00%       1 300024 java.lang.AbstractStringBuilder.<init>
CPU SAMPLES END
